using System.Collections.Concurrent;

var builder = WebApplication.CreateBuilder(args);

builder.Services.AddSingleton<ThreadSafeShipmentService>();
builder.Services.AddSingleton<UnsafeShipmentService>();

var app = builder.Build();

app.Urls.Add("http://127.0.0.1:5130");

app.MapPost("/shipments/safe", (ThreadSafeShipmentService service, ILogger<Program> logger) =>
{
    var startTime = DateTime.UtcNow;
    var result = service.AddShipment();
    var duration = (DateTime.UtcNow - startTime).TotalMilliseconds;
    
    logger.LogInformation("[Safe] Operation completed in {Duration}ms. Success: {Success}, Count: {Count}",
        duration, result, service.Count);
    
    return Results.Ok(new { success = result, count = service.Count, duration });
});

app.MapPost("/shipments/unsafe", (UnsafeShipmentService service, ILogger<Program> logger) =>
{
    try
    {
        var startTime = DateTime.UtcNow;
        var result = service.AddShipment();
        var duration = (DateTime.UtcNow - startTime).TotalMilliseconds;
        
        logger.LogInformation("[Unsafe] Operation completed in {Duration}ms. Success: {Success}, Count: {Count}",
            duration, result, service.Count);
        
        return Results.Ok(new { success = result, count = service.Count, duration });
    }
    catch (Exception ex)
    {
        logger.LogError(ex, "[Unsafe] Operation failed with error: {Error}", ex.Message);
        return Results.BadRequest(new { error = ex.Message });
});

app.Run();

public class ShipmentInfo
{
    public string TrackingNumber { get; set; }
    public string Destination { get; set; }
    public string Status { get; set; }
    public DateTime EstimatedDelivery { get; set; }
}

// Thread-safe implementation using ConcurrentDictionary
public class ThreadSafeShipmentService
{
    private readonly ConcurrentDictionary<string, ShipmentInfo> _shipments = new();
    private static readonly Random _random = new();

    public int Count => _shipments.Count;

    private readonly ILogger<ThreadSafeShipmentService> _logger;

    public ThreadSafeShipmentService(ILogger<ThreadSafeShipmentService> logger)
    {
        _logger = logger;
    }

    public bool AddShipment()
    {
        string trackingNumber = GenerateTrackingNumber();
        var shipment = new ShipmentInfo
        {
            TrackingNumber = trackingNumber,
            Destination = "Istanbul, Turkey",
            Status = "Processing",
            EstimatedDelivery = DateTime.UtcNow.AddDays(3)
        };

        _logger.LogDebug("[Safe] Attempting to add shipment with tracking number: {TrackingNumber}", trackingNumber);
        var result = _shipments.TryAdd(trackingNumber, shipment);
        _logger.LogDebug("[Safe] Add shipment attempt result: {Result} for tracking number: {TrackingNumber}", result, trackingNumber);
        
        return result;
    }

    private string GenerateTrackingNumber() =>
        $"TR{DateTime.UtcNow:yyyyMMdd}{_random.Next(1000, 9999)}";
}

public class UnsafeShipmentService
{
    private readonly Dictionary<string, ShipmentInfo> _shipments = new();
    private static readonly Random _random = new();

    public int Count => _shipments.Count;

    private readonly ILogger<UnsafeShipmentService> _logger;

    public UnsafeShipmentService(ILogger<UnsafeShipmentService> logger)
    {
        _logger = logger;
    }

    public bool AddShipment()
    {
        string trackingNumber = GenerateTrackingNumber();
        _logger.LogDebug("[Unsafe] Generated tracking number: {TrackingNumber}", trackingNumber);
        
        if (!_shipments.ContainsKey(trackingNumber))
        {
            _logger.LogDebug("[Unsafe] Tracking number {TrackingNumber} not found, attempting to add", trackingNumber);
            var shipment = new ShipmentInfo
            {
                TrackingNumber = trackingNumber,
                Destination = "Istanbul, Turkey",
                Status = "Processing",
                EstimatedDelivery = DateTime.UtcNow.AddDays(3)
            };
            
            _shipments[trackingNumber] = shipment; // Potential race condition here!
            _logger.LogDebug("[Unsafe] Successfully added shipment with tracking number: {TrackingNumber}", trackingNumber);
            return true;
        }
        _logger.LogDebug("[Unsafe] Tracking number {TrackingNumber} already exists", trackingNumber);
        return false;
    }

    private string GenerateTrackingNumber() =>
        $"TR{DateTime.UtcNow:yyyyMMdd}{_random.Next(1000, 9999)}";
}